@page "/johny"
@using AspireApp.ApiService.Strategy
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@rendermode InteractiveServer


<h3>Order Book</h3>

@if (_events == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Title</th>
                <th>Score</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var myEvent in _events)
            {
                <tr>
                    <td><img src="@myEvent.Icon" alt="Market Icon" style="width: 50px;" /></td>
                    <td>
                        <div>
                            @GetText(myEvent)
                        </div>
                        <div>
                            <img src="@myEvent.Icons[0]" style="width: 50px;" /> @myEvent.Outcomes?[0]
                        </div>
                        <div>
                            <img src="@myEvent.Icons[1]" style="width: 50px;" /> @myEvent.Outcomes?[1]
                        </div>
                    </td>
                    <td>@myEvent.Scores?[0]</td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection? _hubConnection;
    private List<MyEvent>? _events;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:7593/websockethub").Build();
        _hubConnection.On<string>("Events", message =>
        {
            _events = System.Text.Json.JsonSerializer.Deserialize<List<MyEvent>>(message)!;
            InvokeAsync(StateHasChanged);
        });
        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("JoinGroup", "JohnyComeLately");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.SendAsync("LeaveGroup", "JohnyComeLately");
            await _hubConnection.DisposeAsync();
        }
    }

    private string GetText(MyEvent myEvent)
    {
        return myEvent.Period switch
        {
            "FT" => "Final",
            "POST" => "Finished",
            "NS" => "Not Started",
            _ => $"{myEvent.Period} - {myEvent.Elapsed}"
        };
    }
}