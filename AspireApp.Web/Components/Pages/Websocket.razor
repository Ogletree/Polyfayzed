@page "/websocket"
@using AspireApp.ApiService.Domain
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@rendermode InteractiveServer


<h3>Order Book</h3>

@if (_orderBook == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <table class="table">
        <thead>
        <tr>
            <th>Price</th>
            <th>Size</th>
            <th>Depth</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var ask in _orderBook.Asks)
        {
            <tr>
                <td>@ask.Price</td>
                <td>@ask.Size</td>
                <td>
                    <div class="progress">
                        <div class="progress-bar bg-danger" role="progressbar" style="width: @(ask.Size / GetAskSize() * 100)%" aria-valuenow="@ask.Size" aria-valuemin="0" aria-valuemax="@GetBidSize()"></div>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <table class="table">
        <thead>
            <tr>
                <th>Price</th>
                <th>Size</th>
                <th>Depth</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bid in _orderBook.Bids)
            {
                <tr>
                    <td>@bid.Price</td>
                    <td>@bid.Size</td>
                    <td>
                        <div class="progress">
                            <div class="progress-bar bg-success" role="progressbar" style="width: @(bid.Size / GetBidSize() * 100)%" aria-valuenow="@bid.Size" aria-valuemin="0" aria-valuemax="@GetBidSize()"></div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection? _hubConnection;
    private OrderBook? _orderBook;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7593/websockethub")
            .Build();

        _hubConnection.On<string>("ReceiveMessage", message =>
        {
            _orderBook = System.Text.Json.JsonSerializer.Deserialize<OrderBook>(message);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("JoinGroup", "OrderBookGroup");
    }

    private decimal GetBidSize()
    {
        var maxBidSize = _orderBook!.Bids.Max(b => b.Size);
        return maxBidSize;
    }

    private decimal GetAskSize()
    {
        var maxAskSize = _orderBook!.Asks.Max(a => a.Size);
        return maxAskSize;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.SendAsync("LeaveGroup", "OrderBookGroup");
            await _hubConnection.DisposeAsync();
        }
    }
}