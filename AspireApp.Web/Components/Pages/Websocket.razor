@page "/websocket"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@rendermode InteractiveServer


<h3>Order Book</h3>

@if (orderBookData == null)
{
    <p><em>Loading...</em></p>
}
else 
{
<table class="table">
    <thead>
    <tr>
        <th>Price</th>
        <th>Size</th>
        <th>Depth</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var bid in orderBookData.Bids)
    {
        <tr>
            <td>@bid.Price</td>
            <td>@bid.Size</td>
            <td>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @(bid.Size / GetMaxSize() * 100)%" aria-valuenow="@bid.Size" aria-valuemin="0" aria-valuemax="@GetMaxSize()"></div>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>

<h3>Asks</h3>

<table class="table">
    <thead>
    <tr>
        <th>Price</th>
        <th>Size</th>
        <th>Depth</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var ask in orderBookData.Asks)
    {
        <tr>
            <td>@ask.Price</td>
            <td>@ask.Size</td>
            <td>
                <div class="progress">
                    <div class="progress-bar bg-danger" role="progressbar" style="width: @(ask.Size / GetMaxSize() * 100)%" aria-valuenow="@ask.Size" aria-valuemin="0" aria-valuemax="@GetMaxSize()"></div>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>
}
@code {
    private HubConnection? _hubConnection;
    private readonly List<string> _messages = [];
    private string _message = string.Empty;
    private OrderBookData orderBookData;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7593/websockethub")
            .Build();

        _hubConnection.On<string>("ReceiveMessage", message =>
        {
            //_messages.Add(message);
            _message = message;
            orderBookData = System.Text.Json.JsonSerializer.Deserialize<OrderBookData>(message);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private double GetMaxSize()
    {
        double maxBidSize = orderBookData.Bids.Max(b => b.Size);
        double maxAskSize = orderBookData.Asks.Max(a => a.Size);
        return Math.Max(maxBidSize, maxAskSize);
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnection!.DisposeAsync();
    }
}

        @code
        {
            public class OrderBookData
            {
                public List<Order> Bids { get; set; }
                public List<Order> Asks { get; set; }
            }

            public class Order
            {
                public double Price { get; set; }
                public double Size { get; set; }
            }
        }
